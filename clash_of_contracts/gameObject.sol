
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

import 'gameObjectInterface.sol';


contract gameObject is gameObjectInterface {

    modifier accept() {
        tvm.accept();
        _;
    }
    uint public healthPoints;
    uint public defence;
    uint public power;

    function attack(address _gameObject) external accept {
        gameObject(_gameObject).recieveAttack(power);
    }
    function notLessThanZero(uint first, uint second) private pure returns(uint result) {
        if (second >= first) {
            first = 0;
        }
        else {
            first -= second;
        }
    }
    function recieveAttack(uint damage) external override accept {
        damage = notLessThanZero(damage, defence);
        healthPoints = notLessThanZero(healthPoints, damage);

        if (isDead()) {
            destroy(msg.sender);
        }
    }

    function isDead() private returns (bool){
        if (healthPoints == 0) {
            return true;
        }
        else {
            return false;
        }
    }
    
    function destroy(address killer) virtual internal accept {
        killer.transfer(1, false, 160);
    }

    function destroyFromBaseStation(address killer) virtual external accept {}
}
